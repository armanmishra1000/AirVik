{
  "info": {
    "_postman_id": "f8e2b116-5a4a-4c3e-8a5c-9b9e3e6f7d8a",
    "name": "User Registration with Email Verification",
    "description": "A comprehensive collection for testing the user registration with email verification APIs for AirVik hotel booking system.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Registration",
      "item": [
        {
          "name": "Register User - Valid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response structure is correct\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.eql(true);",
                  "    pm.expect(responseJson.data).to.be.an('object');",
                  "    pm.expect(responseJson.message).to.include('verification email');",
                  "});",
                  "",
                  "pm.test(\"User data is returned correctly\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.email).to.eql(pm.variables.get(\"test_email\"));",
                  "    pm.expect(responseJson.data.firstName).to.eql(\"Test\");",
                  "    pm.expect(responseJson.data.lastName).to.eql(\"User\");",
                  "    pm.expect(responseJson.data.isVerified).to.eql(false);",
                  "    pm.expect(responseJson.data).to.not.have.property('password');",
                  "    ",
                  "    // Store user ID for later tests",
                  "    if (responseJson.data._id) {",
                  "        pm.environment.set(\"user_id\", responseJson.data._id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate a unique test email to avoid duplicates",
                  "const timestamp = new Date().getTime();",
                  "const testEmail = `test.user.${timestamp}@example.com`;",
                  "pm.variables.set(\"test_email\", testEmail);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{test_email}}\",\n    \"password\": \"SecureP@ssw0rd123\",\n    \"confirmPassword\": \"SecureP@ssw0rd123\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "register"
              ]
            },
            "description": "Register a new user with valid data. Should return 201 Created with user data and a message about verification email."
          },
          "response": []
        },
        {
          "name": "Register User - Invalid Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response structure is correct\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.eql(false);",
                  "    pm.expect(responseJson.error).to.include('email');",
                  "    pm.expect(responseJson.code).to.eql('VALIDATION_ERROR');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"invalid-email\",\n    \"password\": \"SecureP@ssw0rd123\",\n    \"confirmPassword\": \"SecureP@ssw0rd123\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "register"
              ]
            },
            "description": "Attempt to register with an invalid email format. Should return 400 Bad Request with validation error."
          },
          "response": []
        },
        {
          "name": "Register User - Weak Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response structure is correct\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.eql(false);",
                  "    pm.expect(responseJson.error).to.include('password');",
                  "    pm.expect(responseJson.code).to.eql('VALIDATION_ERROR');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate a unique test email to avoid duplicates",
                  "const timestamp = new Date().getTime();",
                  "const testEmail = `test.user.${timestamp}@example.com`;",
                  "pm.variables.set(\"test_email\", testEmail);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{test_email}}\",\n    \"password\": \"weak\",\n    \"confirmPassword\": \"weak\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "register"
              ]
            },
            "description": "Attempt to register with a weak password. Should return 400 Bad Request with validation error."
          },
          "response": []
        },
        {
          "name": "Register User - Duplicate Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Response structure is correct\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.eql(false);",
                  "    pm.expect(responseJson.error).to.include('already exists');",
                  "    pm.expect(responseJson.code).to.eql('DUPLICATE_EMAIL');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{duplicate_email}}\",\n    \"password\": \"SecureP@ssw0rd123\",\n    \"confirmPassword\": \"SecureP@ssw0rd123\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "register"
              ]
            },
            "description": "Attempt to register with an email that already exists. Should return 409 Conflict with duplicate email error."
          },
          "response": []
        }
      ],
      "description": "Tests for user registration endpoint"
    },
    {
      "name": "Email Verification",
      "item": [
        {
          "name": "Verify Email - Valid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response structure is correct\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.eql(true);",
                  "    pm.expect(responseJson.data).to.be.an('object');",
                  "    pm.expect(responseJson.message).to.include('verified');",
                  "});",
                  "",
                  "pm.test(\"User verification status is updated\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.isVerified).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// In a real scenario, we would get this token from the registration response or email",
                  "// For testing purposes, we'll use a mock token or one from the environment",
                  "if (!pm.environment.get(\"valid_verification_token\")) {",
                  "    pm.environment.set(\"valid_verification_token\", \"valid-verification-token-for-testing\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"token\": \"{{valid_verification_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/verify-email",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "verify-email"
              ]
            },
            "description": "Verify a user's email with a valid token. Should return 200 OK with updated user data."
          },
          "response": []
        },
        {
          "name": "Verify Email - Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response structure is correct\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.eql(false);",
                  "    pm.expect(responseJson.error).to.include('invalid');",
                  "    pm.expect(responseJson.code).to.eql('INVALID_TOKEN');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"token\": \"invalid-token\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/verify-email",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "verify-email"
              ]
            },
            "description": "Attempt to verify a user's email with an invalid token. Should return 400 Bad Request."
          },
          "response": []
        },
        {
          "name": "Verify Email - Expired Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response structure is correct\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.eql(false);",
                  "    pm.expect(responseJson.error).to.include('expired');",
                  "    pm.expect(responseJson.code).to.eql('TOKEN_EXPIRED');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"token\": \"expired-token\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/verify-email",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "verify-email"
              ]
            },
            "description": "Attempt to verify a user's email with an expired token. Should return 400 Bad Request with token expired error."
          },
          "response": []
        },
        {
          "name": "GET Verify Email - Browser Redirect",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 302\", function () {",
                  "    pm.response.to.have.status(302);",
                  "});",
                  "",
                  "pm.test(\"Redirects to success page\", function () {",
                  "    pm.response.to.have.header('Location');",
                  "    const location = pm.response.headers.get('Location');",
                  "    pm.expect(location).to.include('/auth/verification-success');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/verify-email/{{valid_verification_token}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "verify-email",
                "{{valid_verification_token}}"
              ]
            },
            "description": "Browser-friendly verification endpoint that redirects to a success page after verification."
          },
          "response": []
        }
      ],
      "description": "Tests for email verification endpoints"
    },
    {
      "name": "Resend Verification",
      "item": [
        {
          "name": "Resend Verification - Valid Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response structure is correct\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.eql(true);",
                  "    pm.expect(responseJson.message).to.include('sent');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{duplicate_email}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/resend-verification",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "resend-verification"
              ]
            },
            "description": "Resend verification email to a valid user. Should return 200 OK with success message."
          },
          "response": []
        },
        {
          "name": "Resend Verification - Non-existent Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response structure is correct\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.eql(false);",
                  "    pm.expect(responseJson.error).to.include('not found');",
                  "    pm.expect(responseJson.code).to.eql('USER_NOT_FOUND');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"nonexistent@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/resend-verification",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "resend-verification"
              ]
            },
            "description": "Attempt to resend verification email to a non-existent user. Should return 404 Not Found."
          },
          "response": []
        },
        {
          "name": "Resend Verification - Already Verified",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response structure is correct\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.eql(false);",
                  "    pm.expect(responseJson.error).to.include('already verified');",
                  "    pm.expect(responseJson.code).to.eql('ALREADY_VERIFIED');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// In a real scenario, we would use an email that we know is already verified",
                  "// For testing purposes, we'll use a mock email",
                  "if (!pm.environment.get(\"verified_email\")) {",
                  "    pm.environment.set(\"verified_email\", \"verified.user@example.com\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{verified_email}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/resend-verification",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "resend-verification"
              ]
            },
            "description": "Attempt to resend verification email to an already verified user. Should return 400 Bad Request."
          },
          "response": []
        }
      ],
      "description": "Tests for resending verification emails"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Collection-level pre-request script",
          "// Set default values for environment variables if not already set",
          "if (!pm.environment.get(\"base_url\")) {",
          "    pm.environment.set(\"base_url\", \"http://localhost:3000\");",
          "}",
          "",
          "// Set a duplicate email for testing duplicate email validation",
          "if (!pm.environment.get(\"duplicate_email\")) {",
          "    pm.environment.set(\"duplicate_email\", \"existing.user@example.com\");",
          "}",
          "",
          "// Set up rate limiting test variables",
          "if (!pm.environment.get(\"rate_limit_count\")) {",
          "    pm.environment.set(\"rate_limit_count\", 0);",
          "}",
          "",
          "// Set up token expiration test variables",
          "if (!pm.environment.get(\"token_creation_time\")) {",
          "    pm.environment.set(\"token_creation_time\", new Date().getTime());",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Collection-level test script",
          "// Common assertions for all requests",
          "pm.test(\"Response time is acceptable\", function() {",
          "    pm.expect(pm.response.responseTime).to.be.below(1000);",
          "});",
          "",
          "pm.test(\"Response has correct Content-Type header\", function() {",
          "    if (!pm.request.url.toString().includes('/verify-email/')) { // Skip for GET redirect endpoint",
          "        pm.response.to.have.header(\"Content-Type\");",
          "        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
          "    }",
          "});",
          "",
          "// Rate limiting test",
          "if (pm.request.url.toString().includes('/register')) {",
          "    const rateCount = pm.environment.get(\"rate_limit_count\");",
          "    pm.environment.set(\"rate_limit_count\", parseInt(rateCount) + 1);",
          "    ",
          "    if (parseInt(rateCount) > 5) {",
          "        pm.test(\"Rate limiting should be enforced\", function() {",
          "            if (pm.response.code === 429) {",
          "                pm.expect(pm.response.json().code).to.eql('RATE_LIMIT_EXCEEDED');",
          "            }",
          "        });",
          "    }",
          "}",
          "",
          "// Email uniqueness validation",
          "if (pm.request.url.toString().includes('/register') && pm.request.body) {",
          "    try {",
          "        const requestBody = JSON.parse(pm.request.body.raw);",
          "        if (requestBody.email === pm.environment.get(\"duplicate_email\")) {",
          "            pm.test(\"Email uniqueness validation\", function() {",
          "                pm.expect(pm.response.code).to.eql(409);",
          "                pm.expect(pm.response.json().code).to.eql('DUPLICATE_EMAIL');",
          "            });",
          "        }",
          "    } catch (e) {}",
          "}",
          "",
          "// Token expiration handling",
          "if (pm.request.url.toString().includes('/verify-email')) {",
          "    const tokenCreationTime = pm.environment.get(\"token_creation_time\");",
          "    const currentTime = new Date().getTime();",
          "    const tokenAge = (currentTime - tokenCreationTime) / (1000 * 60 * 60); // in hours",
          "    ",
          "    if (tokenAge > 24 && pm.request.body && pm.request.body.raw.includes('expired-token')) {",
          "        pm.test(\"Token expiration handling\", function() {",
          "            pm.expect(pm.response.code).to.eql(400);",
          "            pm.expect(pm.response.json().code).to.eql('TOKEN_EXPIRED');",
          "        });",
          "    }",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ],
  "collection": {
    "name": "Complete Registration Flow",
    "description": "Tests the complete user registration flow from registration to email verification",
    "item": [
      {
        "name": "1. Register New User",
        "request": {
          "method": "POST",
          "url": "{{base_url}}/api/v1/auth/register",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": "{\n    \"email\": \"{{flow_test_email}}\",\n    \"password\": \"SecureP@ssw0rd123\",\n    \"confirmPassword\": \"SecureP@ssw0rd123\",\n    \"firstName\": \"Flow\",\n    \"lastName\": \"Test\"\n}"
          }
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "exec": [
                "// Generate a unique test email for the flow",
                "const timestamp = new Date().getTime();",
                "const flowTestEmail = `flow.test.${timestamp}@example.com`;",
                "pm.environment.set(\"flow_test_email\", flowTestEmail);"
              ],
              "type": "text/javascript"
            }
          },
          {
            "listen": "test",
            "script": {
              "exec": [
                "pm.test(\"Registration successful\", function () {",
                "    pm.response.to.have.status(201);",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson.success).to.eql(true);",
                "    ",
                "    // Store user ID and verification token for next steps",
                "    if (responseJson.data._id) {",
                "        pm.environment.set(\"flow_user_id\", responseJson.data._id);",
                "    }",
                "    ",
                "    // In test mode, the backend includes the verification token in the response",
                "    if (responseJson.data.verificationToken) {",
                "        console.log('Found verification token in response:', responseJson.data.verificationToken);",
                "        pm.environment.set(\"flow_verification_token\", responseJson.data.verificationToken);",
                "    } else {",
                "        console.log('No verification token found in response, using fallback token');",
                "        pm.environment.set(\"flow_verification_token\", \"1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f1a2b\");",
                "    }",
                "});"
              ],
              "type": "text/javascript"
            }
          }
        ]
      },
      {
        "name": "2. Verify Email",
        "request": {
          "method": "POST",
          "url": "{{base_url}}/api/v1/auth/verify-email",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": {
            "mode": "raw",
            "raw": "{\n    \"token\": \"{{flow_verification_token}}\"\n}"
          }
        },
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "pm.test(\"Email verification successful\", function () {",
                "    pm.response.to.have.status(200);",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson.success).to.eql(true);",
                "    pm.expect(responseJson.data.isVerified).to.eql(true);",
                "});"
              ],
              "type": "text/javascript"
            }
          }
        ]
      }
    ]
  }
}
