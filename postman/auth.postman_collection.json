{
  "info": {
    "name": "AirVik Authentication API",
    "description": "Comprehensive test collection for AirVik authentication endpoints",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "pm.request.headers.add({",
          "    key: 'Content-Type',",
          "    value: 'application/json'",
          "});",
          "",
          "// Set base URL if not already set",
          "if (!pm.environment.get('base_url')) {",
          "    pm.environment.set('base_url', 'http://localhost:5000/api/v1/auth');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test('Response has proper headers', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000/api/v1/auth",
      "type": "string"
    },
    {
      "key": "valid_email",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "valid_password",
      "value": "Password123!",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication Flow",
      "item": [
        {
          "name": "1. Login - Valid Credentials",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Clear existing tokens for fresh test",
                  "pm.environment.unset('access_token');",
                  "pm.environment.unset('refresh_token');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data.user).to.have.property('id');",
                  "    pm.expect(jsonData.data.user).to.have.property('email');",
                  "    pm.expect(jsonData.data.user).to.have.property('role');",
                  "});",
                  "",
                  "pm.test('Response contains token expiry', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('expiresIn');",
                  "    pm.expect(jsonData.data.expiresIn).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Cookies are set', function () {",
                  "    pm.expect(pm.cookies.has('access_token')).to.be.true;",
                  "    pm.expect(pm.cookies.has('refresh_token')).to.be.true;",
                  "});",
                  "",
                  "// Extract tokens from cookies for subsequent requests",
                  "const accessToken = pm.cookies.get('access_token');",
                  "const refreshToken = pm.cookies.get('refresh_token');",
                  "",
                  "if (accessToken) {",
                  "    pm.environment.set('access_token', accessToken);",
                  "}",
                  "",
                  "if (refreshToken) {",
                  "    pm.environment.set('refresh_token', refreshToken);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{valid_email}}\",\n  \"password\": \"{{valid_password}}\",\n  \"rememberMe\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/login",
              "host": ["{{base_url}}"],
              "path": ["login"]
            }
          }
        },
        {
          "name": "2. Get Current User - Authenticated",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data.user).to.have.property('id');",
                  "    pm.expect(jsonData.data.user).to.have.property('email');",
                  "    pm.expect(jsonData.data.user).to.have.property('role');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/me",
              "host": ["{{base_url}}"],
              "path": ["me"]
            }
          }
        },
        {
          "name": "3. Verify Token - Valid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Token is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData.data).to.have.property('valid', true);",
                  "    pm.expect(jsonData.data).to.have.property('payload');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{access_token}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/verify-token",
              "host": ["{{base_url}}"],
              "path": ["verify-token"]
            }
          }
        },
        {
          "name": "4. Refresh Token - Valid Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('New access token received', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData.data).to.have.property('expiresIn');",
                  "});",
                  "",
                  "pm.test('New access token cookie is set', function () {",
                  "    pm.expect(pm.cookies.has('access_token')).to.be.true;",
                  "});",
                  "",
                  "// Update access token in environment",
                  "const newAccessToken = pm.cookies.get('access_token');",
                  "if (newAccessToken) {",
                  "    pm.environment.set('access_token', newAccessToken);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/refresh",
              "host": ["{{base_url}}"],
              "path": ["refresh"]
            }
          }
        },
        {
          "name": "5. Logout - Authenticated User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Logout successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData.message).to.include('Logout successful');",
                  "});",
                  "",
                  "// Clear tokens from environment",
                  "pm.environment.unset('access_token');",
                  "pm.environment.unset('refresh_token');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/logout",
              "host": ["{{base_url}}"],
              "path": ["logout"]
            }
          }
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error response structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', false);",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.include('Invalid email or password');",
                  "});",
                  "",
                  "pm.test('No cookies set on failed login', function () {",
                  "    pm.expect(pm.cookies.has('access_token')).to.be.false;",
                  "    pm.expect(pm.cookies.has('refresh_token')).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{valid_email}}\",\n  \"password\": \"wrongpassword\",\n  \"rememberMe\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/login",
              "host": ["{{base_url}}"],
              "path": ["login"]
            }
          }
        },
        {
          "name": "Login - Invalid Email Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error response', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', false);",
                  "    pm.expect(jsonData).to.have.property('errors');",
                  "    pm.expect(jsonData.errors).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"{{valid_password}}\",\n  \"rememberMe\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/login",
              "host": ["{{base_url}}"],
              "path": ["login"]
            }
          }
        },
        {
          "name": "Get Current User - Unauthenticated",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Clear any existing tokens",
                  "pm.environment.unset('access_token');",
                  "pm.environment.unset('refresh_token');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Authentication error response', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', false);",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData).to.have.property('code');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/me",
              "host": ["{{base_url}}"],
              "path": ["me"]
            }
          }
        },
        {
          "name": "Verify Token - Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Invalid token response', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', false);",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('Invalid or expired token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"invalid.jwt.token\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/verify-token",
              "host": ["{{base_url}}"],
              "path": ["verify-token"]
            }
          }
        },
        {
          "name": "Refresh Token - No Refresh Token",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Clear refresh token cookie",
                  "pm.environment.unset('refresh_token');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Refresh token not found error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', false);",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('Refresh token not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/refresh",
              "host": ["{{base_url}}"],
              "path": ["refresh"]
            }
          }
        }
      ]
    },
    {
      "name": "Rate Limiting Tests",
      "item": [
        {
          "name": "Login Rate Limit - Multiple Attempts",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// This test should be run multiple times to trigger rate limiting",
                  "if (pm.response.code === 429) {",
                  "    pm.test('Rate limit triggered', function () {",
                  "        pm.response.to.have.status(429);",
                  "    });",
                  "    ",
                  "    pm.test('Rate limit error structure', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('success', false);",
                  "        pm.expect(jsonData).to.have.property('code');",
                  "        pm.expect(jsonData.code).to.be.oneOf(['IP_RATE_LIMIT_EXCEEDED', 'EMAIL_RATE_LIMIT_EXCEEDED']);",
                  "    });",
                  "    ",
                  "    pm.test('Retry-After header present', function () {",
                  "        pm.expect(pm.response.headers.has('Retry-After')).to.be.true;",
                  "    });",
                  "} else {",
                  "    pm.test('Login attempt within rate limit', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{valid_email}}\",\n  \"password\": \"wrongpassword\",\n  \"rememberMe\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/login",
              "host": ["{{base_url}}"],
              "path": ["login"]
            }
          }
        }
      ]
    }
  ]
}
